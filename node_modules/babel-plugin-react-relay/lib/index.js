'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = function (babel) {
  if (schemaData) {
    return (0, _babelRelayPlugin2.default)(schemaData)(babel);
  } else {
    return {
      visitor: {}
    };
  }
};

var _path = require('path');

var _babelRelayPlugin = require('babel-relay-plugin');

var _babelRelayPlugin2 = _interopRequireDefault(_babelRelayPlugin);

var _graphql = require('graphql');

var _utilities = require('graphql/utilities');

var _deasync = require('deasync');

var _syncRequest = require('sync-request');

var _syncRequest2 = _interopRequireDefault(_syncRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var packageJson = require(process.cwd() + '/package.json');

var method = Object.keys(packageJson.graphql)[0];
var value = packageJson.graphql[method];

if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
  value = process.env[value.env];
}

var schemaData = void 0;

switch (method) {

  case 'schema':
    var schemaSource = require((0, _path.resolve)(value));
    var wait = true;

    (0, _graphql.graphql)(schemaSource, _utilities.introspectionQuery).then(function (result) {
      schemaData = result.data;
      wait = false;
    });

    // TODO find a cleaner way to do this
    (0, _deasync.loopWhile)(function () {
      return wait;
    });

    break;

  case 'json':
    var schema = require((0, _path.resolve)(value));
    schemaData = schema.data;

    break;

  case 'url':
    var res = (0, _syncRequest2.default)('GET', value);
    var result = JSON.parse(res.getBody());
    schemaData = result.data;

    break;

  default:
    throw new Error('Invalid method. Valid keys are `schema, json, url`');
}

console.log('GraphQL successfully schema loaded from ' + value);
